[{"/Users/rosegaban/udemy_courses/React/devkeep/src/index.js":"1","/Users/rosegaban/udemy_courses/React/devkeep/src/App.js":"2","/Users/rosegaban/udemy_courses/React/devkeep/src/reportWebVitals.js":"3","/Users/rosegaban/udemy_courses/React/devkeep/src/components/NoteEditor/NoteEditor.js":"4","/Users/rosegaban/udemy_courses/React/devkeep/src/components/NotesList/NotesList.js":"5","/Users/rosegaban/udemy_courses/React/devkeep/src/components/CodeEditor/CodeEditor.js":"6","/Users/rosegaban/udemy_courses/React/devkeep/src/utility/useStore.js":"7","/Users/rosegaban/udemy_courses/React/devkeep/src/components/NotesList/NoteListItem/NoteListItem.js":"8","/Users/rosegaban/udemy_courses/React/devkeep/src/container/Notes/Notes.js":"9","/Users/rosegaban/udemy_courses/React/devkeep/src/components/UI/DeleteButton/DeleteButton.js":"10","/Users/rosegaban/udemy_courses/React/devkeep/src/components/UI/SaveButton/SaveButton.js":"11","/Users/rosegaban/udemy_courses/React/devkeep/src/components/UI/AddButton/AddButton.js":"12","/Users/rosegaban/udemy_courses/React/devkeep/src/hoc/Layout.js":"13","/Users/rosegaban/udemy_courses/React/devkeep/src/components/Navigation/Toolbar/Toolbar.js":"14","/Users/rosegaban/udemy_courses/React/devkeep/src/components/CodeEditor/codeEditor.js":"15","/Users/rosegaban/udemy_courses/React/devkeep/src/components/Logo/Logo.js":"16","/Users/rosegaban/udemy_courses/React/devkeep/src/components/Navigation/Navigation.js":"17","/Users/rosegaban/udemy_courses/React/devkeep/src/components/Navigation/NavigationItem/NavigationItem.js":"18","/Users/rosegaban/udemy_courses/React/devkeep/src/components/Auth/Signup.js":"19","/Users/rosegaban/udemy_courses/React/devkeep/src/components/Auth/Login.js":"20","/Users/rosegaban/udemy_courses/React/devkeep/src/context/UserContext.js":"21","/Users/rosegaban/udemy_courses/React/devkeep/src/components/Profile/Profile.js":"22","/Users/rosegaban/udemy_courses/React/devkeep/src/components/UI/LanguageIcn/LanguageIcn.js":"23","/Users/rosegaban/udemy_courses/React/devkeep/src/components/UI/PaletteIcn/PaletteIcn.js":"24","/Users/rosegaban/udemy_courses/React/devkeep/src/utility/useDebounce.js":"25","/Users/rosegaban/udemy_courses/React/devkeep/src/utility/usePrevious.js":"26"},{"size":763,"mtime":1611110847046,"results":"27","hashOfConfig":"28"},{"size":987,"mtime":1611175714870,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1610413885728,"results":"30","hashOfConfig":"28"},{"size":1275,"mtime":1611632078237,"results":"31","hashOfConfig":"28"},{"size":1188,"mtime":1611632109164,"results":"32","hashOfConfig":"28"},{"size":2603,"mtime":1611629543186,"results":"33","hashOfConfig":"28"},{"size":2839,"mtime":1611629908016,"results":"34","hashOfConfig":"28"},{"size":421,"mtime":1611123514336,"results":"35","hashOfConfig":"28"},{"size":7633,"mtime":1611647068727,"results":"36","hashOfConfig":"28"},{"size":435,"mtime":1610571302829,"results":"37","hashOfConfig":"28"},{"size":442,"mtime":1610571293261,"results":"38","hashOfConfig":"28"},{"size":329,"mtime":1611624820691,"results":"39","hashOfConfig":"28"},{"size":387,"mtime":1611091306893,"results":"40","hashOfConfig":"28"},{"size":454,"mtime":1611722127161,"results":"41","hashOfConfig":"28"},{"size":649,"mtime":1611090162398,"results":"42","hashOfConfig":"28"},{"size":318,"mtime":1611724676617,"results":"43","hashOfConfig":"28"},{"size":1074,"mtime":1611722823847,"results":"44","hashOfConfig":"28"},{"size":460,"mtime":1611624839605,"results":"45","hashOfConfig":"28"},{"size":4041,"mtime":1611123791961,"results":"46","hashOfConfig":"28"},{"size":2104,"mtime":1611349197535,"results":"47","hashOfConfig":"28"},{"size":2319,"mtime":1611180172473,"results":"48","hashOfConfig":"28"},{"size":2076,"mtime":1611383931449,"results":"49","hashOfConfig":"28"},{"size":214,"mtime":1611286697522,"results":"50","hashOfConfig":"28"},{"size":210,"mtime":1611286694754,"results":"51","hashOfConfig":"28"},{"size":388,"mtime":1611629548554,"results":"52","hashOfConfig":"28"},{"size":207,"mtime":1611617379502,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"17ukiy1",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rosegaban/udemy_courses/React/devkeep/src/index.js",[],["111","112"],"/Users/rosegaban/udemy_courses/React/devkeep/src/App.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/reportWebVitals.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/NoteEditor/NoteEditor.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/NotesList/NotesList.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/CodeEditor/CodeEditor.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/utility/useStore.js",["113"],"import React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { useAuth } from '../context/UserContext';\n\nexport const supabase = createClient(\n    process.env.REACT_APP_SUPABASE_URL,\n    process.env.REACT_APP_SUPABASE_KEY\n);\n\nexport const useStore = (props) => {\n    const { currentUser } = useAuth();\n    const [notes, setNotes] = useState([]);\n\n    useEffect(() => {\n        fetchNotes(currentUser.id)\n            .then(response => {\n                setNotes(response.sort((a, b) => b.id - a.id));\n            })\n            .catch(console.error)\n    }, [currentUser.id]);\n\n    return { notes, setNotes };\n};\n\nexport const fetchNotes = async (user_id) => {\n    try {\n        let { data, error } = await supabase\n            .from('notes')\n            .select()\n            .eq('user_id', user_id);\n        if (error) {\n            throw new Error(error);\n        }\n        return data;\n    } catch (error) {\n        console.log('error', error);\n    };\n};\n\nexport const addNote = async (title, description, code, language, user_id) => {\n    try {\n        let { data, error } = await supabase\n            .from('notes')\n            .insert([{\n                title,\n                description,\n                code,\n                user_id,\n                language\n            }]);\n            if (error) {\n                throw new Error(error);\n            }\n            return data;\n    } catch (error) {\n        console.log('error', error);\n    };\n};\n\nexport const deleteNote = async (noteId, user_id) => {\n    try {\n        const { data, error } = await supabase\n            .from('notes')\n            .delete()\n            .match({\n                id: noteId,\n                user_id: user_id\n            });\n            if (error) {\n                throw new Error(error);\n            }\n            return data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const updateNote = async (noteId, title, description, code, language) => {\n    try {\n        const { data, error } = await supabase\n            .from('notes')\n            .update({\n                title: title,\n                description: description,\n                code: code,\n                language: language\n            })\n            .match({ id: noteId });\n            if (error) {\n                throw new Error(error);\n            }\n            return data;\n    } catch (error) {\n        console.log('error', error);\n    }\n};\n\nexport const getNote = async (noteId) => {\n    try {\n        let { data, error } = await supabase\n            .from('notes')\n            .select()\n            .eq('id', noteId)\n        if (error) {\n            throw new Error(error);\n        }\n        console.log(data);\n        return data;\n    } catch (error) {\n        console.log('error', error);\n    }\n}\n","/Users/rosegaban/udemy_courses/React/devkeep/src/components/NotesList/NoteListItem/NoteListItem.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/container/Notes/Notes.js",["114","115","116","117","118","119"],"import React, { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '../../context/UserContext';\nimport { addNote, deleteNote, updateNote, useStore, fetchNotes } from '../../utility/useStore';\nimport { useDebounce } from '../../utility/useDebounce';\nimport NotesList from '../../components/NotesList/NotesList';\nimport NoteEditor from '../../components/NoteEditor/NoteEditor';\nimport CodeEditor, { languages } from '../../components/CodeEditor/CodeEditor';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport classes from './Notes.module.css';\n\nconst debounce = (fn, delay) => {\n    let handler = setTimeout(() => null, );\n    return () => clearTimeout(handler);\n};\n\nexport default function Notes() {\n    const { currentUser } = useAuth();\n    const { notes, setNotes } = useStore();\n    const [selectedNoteIndex, setSelectedNoteIndex] = useState(0);\n    const [noteId, setNoteId] = useState(null);\n    const [noteTitle, setNoteTitle] = useState('');\n    const [noteDescription, setNoteDescription] = useState('');\n    const [code, setCode] = useState('');\n    const [language, setLanguage] = useState('javascript');\n    const [theme, setTheme] = useState('github');\n    const [isAddingNote, setIsAddingNote] = useState(false);\n    const [isNoteEdited, setIsNoteEdited] = useState(false);\n    const titleInputEl = useRef();\n\n    // useEffect(() => {\n    //     titleInputEl.current.focus();\n    // });\n\n    const notifySave = () => {\n        toast.dark(\"Note successfully saved!\", {\n            position: \"bottom-right\",\n            autoClose: 2500,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n        });\n    };\n\n    const notifyDelete = () => {\n        toast.dark(\"Note deleted!\", {\n            position: \"bottom-right\",\n            autoClose: 2500,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n        });\n    };\n\n    useEffect(() => {\n        titleInputEl.current.focus();\n        if (notes && notes.length > 0 && (!isAddingNote || !isNoteEdited)) {\n            setNoteId(notes[selectedNoteIndex].id);\n            setNoteTitle(notes[selectedNoteIndex].title);\n            setNoteDescription(notes[selectedNoteIndex].description);\n            setCode(notes[selectedNoteIndex].code);\n            setLanguage(notes[selectedNoteIndex].language);\n        }\n    }, [notes, setNotes]);\n\n    useEffect(() => {\n        console.log('isAddingNote ', isAddingNote);\n        console.log('selectedNoteIndex', selectedNoteIndex);\n        console.log('noteId ', noteId);\n        console.log(notes.length);\n        if (notes && notes.length > 0 && !isAddingNote) {\n            let fetchedNotes = [];\n            fetchNotes(currentUser.id)\n                .then(response => {\n                    fetchedNotes = response.sort((a,b) => b.id - a.id);\n                    setNotes(fetchedNotes);\n                    setNoteId(fetchedNotes[selectedNoteIndex].id);\n                    setNoteTitle(fetchedNotes[selectedNoteIndex].title);\n                    setNoteDescription(fetchedNotes[selectedNoteIndex].description);\n                    setCode(fetchedNotes[selectedNoteIndex].code);\n                    setLanguage(fetchedNotes[selectedNoteIndex].language);\n                }\n            );\n        }\n    }, [currentUser, selectedNoteIndex]);\n\n    const handleNoteClick = (e) => {\n        setIsAddingNote(false);\n        const noteClickedIndex = notes.findIndex(note => note.id === parseInt(e.target.dataset.id));\n        setNoteId(notes[noteClickedIndex].id);\n        setNoteTitle(notes[noteClickedIndex].title);\n        setNoteDescription(notes[noteClickedIndex].description);\n        setCode(notes[noteClickedIndex].code);\n        setLanguage(notes[noteClickedIndex].language);\n\n        setSelectedNoteIndex(notes.findIndex(note => note.id === parseInt(e.target.dataset.id)));\n    };\n\n    const handleNoteTitleChange = (e) => {\n        setNoteTitle(e.target.value);\n        setIsNoteEdited(true);\n    };\n\n    const handleNoteDescriptionChange = (value, delta, source) => {\n        setNoteDescription(value);\n        if (source === 'user') {\n            setIsNoteEdited(true);\n        }\n    };\n\n    const handleCodeChange = (value) => {\n        setCode(value);\n        setIsNoteEdited(true);\n    };\n\n    const initializeAddNewNote = () => {\n        setIsAddingNote(true);\n        setSelectedNoteIndex(null);\n        setNoteId(null);\n        setNoteTitle('');\n        setNoteDescription('');\n        setCode('');\n        setLanguage('javascript');\n        titleInputEl.current.focus();\n    };\n\n    const handleDeleteNote = (noteId) => {\n        setNotes(notes.filter(note => note.id !== noteId));\n        setIsAddingNote(false);\n        deleteNote(noteId, currentUser.id);\n        setSelectedNoteIndex(selectedNoteIndex);\n        notifyDelete();\n    };\n\n    const handleSaveNote = () => {\n        // need to handle how to save untitled notes\n        console.log('save');\n        if (isAddingNote) {\n            let title = '';\n            if (noteTitle === '') {\n                title = 'Untitled'\n            } else {\n                title = noteTitle;\n            }\n            addNote(title, noteDescription, code, language, currentUser.id);\n            setIsAddingNote(false);\n            // setSelectedNoteIndex(0);\n            setNotes([{\n                id: title,\n                description: noteDescription,\n                code: code,\n                user_id: currentUser.id,\n                language: language\n            }, ...notes]);\n            console.log('[SAVE] setSelectedNoteIndex(0) ');\n            console.log('[SAVE] setIsAddingNote ');\n        } else {\n            updateNote(noteId, noteTitle, noteDescription, code, language);\n        }\n        notifySave();\n    };\n\n    useEffect(() => {\n        const timeOut = setTimeout(() => {\n            if (isNoteEdited) {\n                handleSaveNote();\n            }\n            setIsNoteEdited(false);\n        }, 3000);\n        return () => {\n            clearTimeout(timeOut);\n        }\n    }, [isAddingNote, isNoteEdited, noteTitle, noteDescription, code, language]);\n\n\n    const handleLanguageChange = (e) => {\n        setLanguage(e.target.value);\n        setIsNoteEdited(true);\n\n    };\n\n    const handleThemeChange = (e) => {\n        setTheme(e.target.value);\n    };\n\n    return (\n        <div>\n            <div className={classes.Container}>\n                <NotesList\n                    notes={notes}\n                    noteClicked={handleNoteClick}\n                    addNoteClicked={initializeAddNewNote}\n                    noteId={noteId} />\n                <NoteEditor\n                    inputRef={titleInputEl}\n                    noteTitle={noteTitle}\n                    noteDescription={noteDescription}\n                    noteTitleChanged={handleNoteTitleChange}\n                    noteDescriptionChanged={handleNoteDescriptionChange}\n                    deleteClicked={() => handleDeleteNote(noteId)}\n                    saveClicked={() => handleSaveNote()} />\n                <CodeEditor\n                    value={code}\n                    codeChanged={handleCodeChange}\n                    LanguageChanged={handleLanguageChange}\n                    language={language}\n                    ThemeChanged={handleThemeChange}\n                    theme={theme} />\n                <ToastContainer />\n            </div>\n        </div>\n    )\n}\n","/Users/rosegaban/udemy_courses/React/devkeep/src/components/UI/DeleteButton/DeleteButton.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/UI/SaveButton/SaveButton.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/UI/AddButton/AddButton.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/hoc/Layout.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/Navigation/Toolbar/Toolbar.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/CodeEditor/codeEditor.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/Logo/Logo.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/Navigation/Navigation.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/Navigation/NavigationItem/NavigationItem.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/Auth/Signup.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/Auth/Login.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/context/UserContext.js",["120","121"],"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../utility/useStore';\nimport { useHistory } from 'react-router-dom';\n\nconst UserContext = createContext();\n\nexport const useAuth = () => {\n    return useContext(UserContext);\n};\n\nexport const UserProvider = (props) => {\n    const history = useHistory();\n    const [session, setSession] = useState();\n    const [currentUser, setCurrentUser] = useState();\n    const [isLoading, setIsLoading] = useState(true);\n\n    const signup = async (email, password) => {\n        try {\n            const { user, error } = await supabase.auth.signUp({\n                email: email,\n                password: password\n            });\n            if (error) {\n                throw new Error(error);\n            }\n            setCurrentUser(user);\n            return user;\n        } catch (error) {\n            console.log('error', error);\n        }\n    };\n\n    const login = async (email, password) => {\n        try {\n            const { user, error } = await supabase.auth.signIn({\n                email: email,\n                password: password\n            });\n            if (error) {\n                throw new Error(error);\n            }\n            setCurrentUser(user);\n            return user;\n        } catch (error) {\n            console.log('error', error);\n        }\n    };\n\n    const logout = async () => {\n        try {\n            const { error } = await supabase.auth.signOut();\n            if (error) {\n                throw new Error(error);\n            }\n            setSession(null);\n            setCurrentUser(null);\n        } catch (error) {\n            console.log('error', error);\n        } finally {\n            // setSession(null);\n            // setCurrentUser(null);\n        }\n    };\n\n    useEffect(() => {\n        const unsubscribe = supabase.auth.onAuthStateChange((event, session) => {\n            if (session) {\n                setCurrentUser(session.user);\n            }\n            setIsLoading(false);\n        });\n        return unsubscribe;\n    }, []);\n\n    const value = {\n        session,\n        currentUser,\n        signup,\n        login,\n        logout\n    };\n\n    return (\n        <UserContext.Provider value={value}>\n            {props.children}\n        </UserContext.Provider>\n    );\n};\n","/Users/rosegaban/udemy_courses/React/devkeep/src/components/Profile/Profile.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/UI/LanguageIcn/LanguageIcn.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/components/UI/PaletteIcn/PaletteIcn.js",[],"/Users/rosegaban/udemy_courses/React/devkeep/src/utility/useDebounce.js",["122"],"import React, { useState, useEffect } from 'react';\n\nexport const useDebounce = (value, delay) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => clearTimeout(handler);\n    }, [value, delay]);\n\n    return debouncedValue;\n};\n","/Users/rosegaban/udemy_courses/React/devkeep/src/utility/usePrevious.js",[],{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":1,"column":8,"nodeType":"129","messageId":"130","endLine":1,"endColumn":13},{"ruleId":"127","severity":1,"message":"131","line":4,"column":10,"nodeType":"129","messageId":"130","endLine":4,"endColumn":21},{"ruleId":"127","severity":1,"message":"132","line":7,"column":22,"nodeType":"129","messageId":"130","endLine":7,"endColumn":31},{"ruleId":"127","severity":1,"message":"133","line":14,"column":7,"nodeType":"129","messageId":"130","endLine":14,"endColumn":15},{"ruleId":"134","severity":1,"message":"135","line":70,"column":8,"nodeType":"136","endLine":70,"endColumn":25,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":91,"column":8,"nodeType":"136","endLine":91,"endColumn":40,"suggestions":"139"},{"ruleId":"134","severity":1,"message":"140","line":179,"column":8,"nodeType":"136","endLine":179,"endColumn":80,"suggestions":"141"},{"ruleId":"127","severity":1,"message":"142","line":12,"column":11,"nodeType":"129","messageId":"130","endLine":12,"endColumn":18},{"ruleId":"127","severity":1,"message":"143","line":15,"column":12,"nodeType":"129","messageId":"130","endLine":15,"endColumn":21},{"ruleId":"127","severity":1,"message":"128","line":1,"column":8,"nodeType":"129","messageId":"130","endLine":1,"endColumn":13},"no-native-reassign",["144"],"no-negated-in-lhs",["145"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'useDebounce' is defined but never used.","'languages' is defined but never used.","'debounce' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isAddingNote', 'isNoteEdited', and 'selectedNoteIndex'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNoteId' needs the current value of 'selectedNoteIndex'.","ArrayExpression",["146"],"React Hook useEffect has missing dependencies: 'isAddingNote', 'noteId', 'notes', and 'setNotes'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'handleSaveNote'. Either include it or remove the dependency array.",["148"],"'history' is assigned a value but never used.","'isLoading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},"Update the dependencies array to be: [isAddingNote, isNoteEdited, notes, selectedNoteIndex, setNotes]",{"range":"155","text":"156"},"Update the dependencies array to be: [currentUser, isAddingNote, noteId, notes, selectedNoteIndex, setNotes]",{"range":"157","text":"158"},"Update the dependencies array to be: [isAddingNote, isNoteEdited, noteTitle, noteDescription, code, language, handleSaveNote]",{"range":"159","text":"160"},[2573,2590],"[isAddingNote, isNoteEdited, notes, selectedNoteIndex, setNotes]",[3505,3537],"[currentUser, isAddingNote, noteId, notes, selectedNoteIndex, setNotes]",[6266,6338],"[isAddingNote, isNoteEdited, noteTitle, noteDescription, code, language, handleSaveNote]"]